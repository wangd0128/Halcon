<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.11.1.0">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('F:/Github/Halcon/2024-04-03/SavedMark', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<c>    </c>
<l>    img_name:=ImageFiles[Index]</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<c>    </c>
<l>    scale_image (Image, ImageScaled, 6, 0)</l>
<c>    </c>
<l>    binary_threshold (ImageScaled, Region, 'max_separability', 'dark', UsedThreshold)</l>
<c>    </c>
<l>    connection (Region, ConnectedRegions)</l>
<c>    </c>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'height', 'and', 100, 99999)</l>
<c>    </c>
<l>    select_shape (SelectedRegions, SelectedRegions, 'rectangularity', 'and', 0.6, 1)</l>
<c>    </c>
<l>    select_shape_std (SelectedRegions, SelectedRegions, 'max_area', 70)</l>
<c>    </c>
<l>    orientation_region (SelectedRegions, Phi)</l>
<l>    gen_rectangle2 (Rectangle, 300, 200, Phi, 100, 1)</l>
<l>    opening (SelectedRegions, Rectangle, SelectedRegions)</l>
<c>    </c>
<l>    region_features (SelectedRegions, 'area', area)</l>
<c>    </c>
<l>    region_features (SelectedRegions, 'row1', row1)</l>
<l>    region_features (SelectedRegions, 'column1', column1)</l>
<l>    region_features (SelectedRegions, 'row2', row2)</l>
<l>    region_features (SelectedRegions, 'column2', column2)</l>
<c>    </c>
<l>    get_image_size (ImageScaled, Width, Height)</l>
<c>    </c>
<l>    wait_line1 := []</l>
<l>    wait_line2 := []</l>
<c>    </c>
<l>    threshold := 10</l>
<l>    gap := 140</l>
<c>    </c>
<l>    if(row1 &lt; threshold and column1 &lt; threshold)</l>
<l>        wait_line1 := [ row2 - gap, column2, row1, column2]</l>
<l>        wait_line2 := [ row2, column2 - gap, row2, column1]</l>
<l>    elseif(row1 &lt; threshold and column2 &gt; Width - threshold)</l>
<l>        wait_line1 := [ row2, column1 + gap, row2, column2]</l>
<l>        wait_line2 := [ row2 - gap, column1, row1, column1]</l>
<l>    elseif(row2 &gt; Height - threshold and column1 &lt; threshold)</l>
<l>        wait_line1 := [ row1 + gap, column2, row2, column2]</l>
<l>        wait_line2 := [ row1, column2 - gap, row1, column1]</l>
<l>    elseif(row2 &gt; Height - threshold and column2 &gt; Width - threshold)</l>
<l>        wait_line1 := [ row1, column1 + gap, row1, column2]</l>
<l>        wait_line2 := [ row1 + gap, column1, row2, column1]</l>
<l>    endif</l>
<c>    </c>
<c></c>
<c>    </c>
<l>    create_metrology_model (MetrologyHandle)</l>
<c>    </c>
<l>    add_metrology_object_line_measure (MetrologyHandle, wait_line1[0], wait_line1[1], wait_line1[2], wait_line1[3], 100, 5, 1, 30, [], [], Index1)</l>
<c>    </c>
<l>    apply_metrology_model (ImageScaled, MetrologyHandle)</l>
<c>    </c>
<l>    get_metrology_object_result_contour (Contour, MetrologyHandle, 0, 'all', 1.5)</l>
<c>    </c>
<l>    fit_line_contour_xld (Contour, 'tukey', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<c>    </c>
<l>    get_metrology_object_measures (Contours, MetrologyHandle, 'all', 'all', Row, Column)</l>
<c>    </c>
<c>    </c>
<l>    create_metrology_model (MetrologyHandle1)</l>
<c>    </c>
<l>    add_metrology_object_line_measure (MetrologyHandle1,  wait_line2[0], wait_line2[1], wait_line2[2], wait_line2[3], 100, 5, 1, 30, [], [], Index1)</l>
<c>    </c>
<l>    apply_metrology_model (ImageScaled, MetrologyHandle1)</l>
<c>    </c>
<l>    get_metrology_object_result_contour (Contour1, MetrologyHandle1, 0, 'all', 1.5)</l>
<c>    </c>
<l>    fit_line_contour_xld (Contour1, 'tukey', -1, 0, 5, 2, RowBegin1, ColBegin1, RowEnd1, ColEnd1, Nr, Nc, Dist)</l>
<c>    </c>
<l>    get_metrology_object_measures (Contours1, MetrologyHandle1, 'all', 'all', Row, Column)</l>
<c>    </c>
<c>    </c>
<l>    intersection_lines ( RowBegin, ColBegin, RowEnd, ColEnd, RowBegin1, ColBegin1, RowEnd1, ColEnd1, Row1, Column1, IsOverlapping)</l>
<c>    </c>
<l>    gen_cross_contour_xld (Cross, Row1, Column1, 46, 0.785398)</l>
<c>    </c>
<l>    gen_region_line (RegionLines, Row1, Column1, RowEnd, ColEnd)</l>
<c>    </c>
<l>    gen_region_line (RegionLines1, Row1, Column1, RowEnd1, ColEnd1)</l>
<c>    </c>
<c>    </c>
<l>    mid_row := ((row1 + row2) / 2)</l>
<l>    mid_column := ((column1 + column2) / 2)</l>
<c>    </c>
<l>    dev_clear_window ()</l>
<l>    dev_display (Image)</l>
<c>    </c>
<l>    dev_display(Contours)</l>
<l>    dev_display(Contours1)</l>
<c>    </c>
<l>    disp_message (WindowHandle, '(' + Row1 + ',' + Column1 + ')'  , 'Image', mid_row, mid_column, 'black', 'true')</l>
<c>    </c>
<c></c>
<l>    dev_display(RegionLines)</l>
<l>    dev_display(RegionLines1)</l>
<c></c>
<l>    dev_display (Cross)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
